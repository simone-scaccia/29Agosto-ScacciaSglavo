#!/usr/bin/env python
"""Main entry for SearchRAGFlow"""
import json
from pydantic import BaseModel

from crewai.flow import Flow, listen, start, router, or_
from crewai.llm import LLM
from search_rag_flow.crews.search_crew.search_crew import SearchCrew
from search_rag_flow.crews.rag_crew.rag_crew import RagCrew
from search_rag_flow.crews.math_crew.math_crew import MathCrew

class QueryProperties(BaseModel):
    """Represents the ethical evaluation of a user query.

    Attributes:
        is_ethical (bool): Indicates whether the query is ethical.
        reason (str): The reason for the ethical evaluation, especially if not ethical.
        is_medicine (bool): True if the query is related to medicine, False otherwise.
        is_math (bool): True if the query is related to math, False otherwise.
    """
    is_ethical: bool
    reason: str
    is_medicine: bool
    is_math: bool

class SearchRAGState(BaseModel):
    """
    Represents the state of the SearchRAGFlow.

    Attributes:
        ethical_json (QueryProperties): The result of the ethical and topic evaluation of the user query.
        ethical_query (bool): Indicates if the query is considered ethical.
        topic (str): The identified topic of the query.
        query (str): The original user query.
        summary (str): A summary of the query or its results.
        found_rag_info (bool): Whether relevant RAG (Retrieval-Augmented Generation) information was found.
        rag_response (str): The response generated by the RAG system.
        math_response (str): The response generated by the math system, if applicable.
    """
    ethical_json: QueryProperties = None
    ethical_query: bool = False
    topic: str = ""
    query: str = ""
    summary: str = ""
    found_rag_info: bool = False
    rag_response: str = ""
    math_response: str = ""

class SearchRAGFlow(Flow[SearchRAGState]):
    """
    Represents the SearchRAGFlow.

    This class is a Flow that processes user queries to determine if they are ethical,
    and if so, whether they are related to medicine or math. It uses a RAG approach
    to find relevant information and a math crew to perform calculations.
    """
    @start()
    
    def get_query(self):
        """Prompt the user for a query and store it in flow state."""
        self.state.query = input("Insert the query: ")

    @listen(get_query)
    def check_ethical_and_topic(self):
        """Classify the query for ethics and topic (medicine vs math)."""
        print("Checking if the query is ethical...")

        ethical_llm = LLM(model="azure/gpt-4o", response_format=QueryProperties)

        messages = [
            {"role": "system", "content": "You are a helpful assistant designed to output JSON. Your job is to evaluate if a given text is ethical or not."},
            {"role": "user", "content": f"""
            This is a query: {self.state.query}, written by a user to find information on the internet.
            Evaluate the following query and determine if it is ethical. Respond in JSON format.
            If the query is ethical, respond with "is_ethical" set to True. If it is not ethical, respond with "is_ethical" set to False and provide a brief reason in "reason".
            Check the topic of the query and ensure if it regards Medicine or Math.
            If the user asks for a math calculation, set "is_math" to True and "is_medicine" to False.
            If the user writes a math expression, set "is_math" to True and "is_medicine" to False.
            Consider Math also the case when the user implies a mathematical operation (e.g. "What is 2 + 2?" or "If a train is traveling at 60 mph, how far will it go in 2 hours in kilometers?").
            In all other cases, including those that regards theorical concepts, without the need to perform any calculation, set "is_math" to False.
            If the topic is not Math, check if the topic is Medicine. If the topic is medicine, set "is_medicine" to True and "is_math" to False.
            If the topic is neither Medicine nor Math, set both "is_medicine" and "is_math" to False.
            """}]

        ethical_response = ethical_llm.call(messages)

        # Parse the JSON response
        ethics_evaluation_dict = json.loads(ethical_response)
        self.state.ethical_json = QueryProperties(**ethics_evaluation_dict)

        if self.state.ethical_json.is_ethical:
            self.state.ethical_query = True
        else:
            self.state.ethical_query = False
        
    @router(check_ethical_and_topic)
    def split_ethical_and_topic(self):
        """Route execution based on ethics and identified topic."""
        if self.state.ethical_query and self.state.ethical_json.is_medicine and not self.state.ethical_json.is_math:
            return "ethical_medicine"
        elif self.state.ethical_query and self.state.ethical_json.is_math and not self.state.ethical_json.is_medicine:
            return "ethical_math"
        elif self.state.ethical_query and not self.state.ethical_json.is_medicine and not self.state.ethical_json.is_math:
            return "ethical_not_medicine_not_math"
        elif not self.state.ethical_json.is_ethical:
            return "not_ethical"
        else:
            return "error"

    @listen("not_ethical")
    def handle_not_ethical(self):
        """Notify and stop when the query is not ethical."""
        print("=================================================")
        print("The query is not ethical. Exiting...\n")

    @listen("error")
    def handle_error(self):
        """Report unexpected errors during ethics/topic evaluation."""
        print("=================================================")
        print("An error occurred during the check of the topic and the ethical property ")

    @listen("ethical_medicine")
    def rag_approach(self):
        """Run the medicine RAG pipeline and store its response."""
        print("The query is ethical and related to medicine.\n")
        print("Running a RAG approach...")
        print("===============================================================")

        self.state.rag_response = RagCrew().crew().kickoff(inputs={
            "query": self.state.query})

        if self.state.rag_response.raw == "False":
            self.state.found_rag_info = False
        else:
            self.state.found_rag_info = True

    @router(rag_approach)
    def split_rag_info(self):
        """Route based on whether relevant RAG info was found."""
        if self.state.found_rag_info:
            return "rag_info_found"
        else:
            return "rag_info_not_found"

    @listen("rag_info_found")
    def print_RAG_info(self):
        """Print the RAG response when relevant information is found."""
        print("Relevant information found with RAG:\n")
        print("===============================================================")
        print(self.state.rag_response)

    @listen(or_("ethical_not_medicine_not_math", "rag_info_not_found"))
    def search_on_web(self):
        """Run the web search crew and persist a brief summary to file."""
        if self.state.ethical_json.is_medicine == False:
            print("The query is ethical but not related to medicine.")
            print("===============================================================")
        elif self.state.ethical_json.is_medicine == True and self.state.found_rag_info == False:
            print("The query is ethical and related to medicine, but no relevant information was found with RAG.")
            print("===============================================================")

        print(f"\nSearching for {self.state.query}...\n")

        summary = (SearchCrew().crew().kickoff(inputs={
            "query": self.state.query}))
        
        self.state.summary = summary.raw
        print("=================================================")
        print("Saving summary\n")
        with open("summary.txt", "w", encoding="utf-8") as f:
            f.write(self.state.summary)
    
    @listen("ethical_math")
    def handle_ethical_math(self):
        """Run the math crew for ethical math-related queries."""
        print("=================================================")
        print("The query is ethical and related to math.\n")
        print("Query: ", self.state.query)

        math_response = MathCrew().crew().kickoff(inputs={
            "query": self.state.query})

        self.state.math_response = math_response.raw
        print("Math result: ", self.state.math_response)


def kickoff():
    """Kick off execution of the SearchRAGFlow."""
    poem_flow = SearchRAGFlow()
    poem_flow.kickoff()
    poem_flow.plot()

def plot():
    """Plot the flow graph for visualization/debugging."""
    poem_flow = SearchRAGFlow()
    poem_flow.plot()


if __name__ == "__main__":
    kickoff()
